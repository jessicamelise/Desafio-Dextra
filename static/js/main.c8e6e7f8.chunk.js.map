{"version":3,"sources":["loadApis/api.js","routes/App.js","components/Comics.js","serviceWorker.js","index.js"],"names":["loadComicsApi","offset","a","fetch","getComicsApi","json","response","console","error","App","useState","comics","setComics","useEffect","then","list","data","results","map","eachComic","index","key","id","title","alt","scr","thumbnail","path","extension","creators","items","length","eachCreator","name","Comics","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"wPAAaA,EAAa,uCAAG,WAAOC,GAAP,iBAAAC,EAAA,+EAEEC,MAAM,iJAAD,OAAkJF,IAFzJ,cAEnBG,EAFmB,gBAGFA,EAAaC,OAHX,cAGnBC,EAHmB,yBAIlBA,GAJkB,kCAOzBC,QAAQC,MAAM,4CAAd,MAPyB,0DAAH,sDCaXC,MATf,WAEE,OACE,6BCHkB,WAAO,IAAD,EACEC,mBAAS,IADX,mBACnBC,EADmB,KACXC,EADW,KAS1B,OANAC,qBAAU,WACRb,EAAc,GAAGc,MAAK,SAACC,GACrBH,EAAUG,EAAKC,KAAKC,cAErB,IAGD,6BACGN,EAAOO,KAAI,SAACC,EAAWC,GAAZ,OACV,yBAAKC,IAAKD,GACR,2BAAID,EAAUG,IACd,2BAAIH,EAAUI,OACd,yBAAKC,IAAKL,EAAUI,MAAOE,IAAG,UAAKN,EAAUO,UAAUC,KAAzB,YAAiCR,EAAUO,UAAUE,aAC9C,IAApCT,EAAUU,SAASC,MAAMC,OACxB,gDACAZ,EAAUU,SAASC,MAAMZ,KAAI,SAACc,EAAaZ,GAAd,OAAwB,uBAAGC,IAAKD,GAAQY,EAAYC,cDdtFC,KEIaC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjC,MAAK,SAAAkC,GACJA,EAAaC,gBAEdC,OAAM,SAAA1C,GACLD,QAAQC,MAAMA,EAAM2C,a","file":"static/js/main.c8e6e7f8.chunk.js","sourcesContent":["export const loadComicsApi = async (offset) => {\r\n  try {\r\n    const getComicsApi = await fetch(`http://gateway.marvel.com/v1/public/comics?ts=1&apikey=8420b5759538c93703a1aa3af67a2199&hash=db6ec985bba99cf00b9fa4140ed9340e&limit=10&offset=${offset}`)\r\n    const response = await getComicsApi.json();\r\n    return response;\r\n  }\r\n  catch (err) {\r\n    console.error(\"We got a problem to fetch the information\", err)\r\n  }\r\n}","import React from 'react';\r\nimport '../App.css';\r\nimport { Comics } from \"../components/Comics\";\r\n\r\nfunction App() {\r\n\r\n  return (\r\n    <div>\r\n      {Comics()}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React, { useState, useEffect } from 'react';\r\n// import '../App.css';\r\nimport { loadComicsApi } from \"../loadApis/api.js\";\r\n\r\nexport const Comics = () => {\r\n  const [comics, setComics] = useState([]);\r\n \r\n  useEffect(() => {\r\n    loadComicsApi(1).then((list) => {\r\n      setComics(list.data.results);\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      {comics.map((eachComic, index) => (\r\n        <div key={index}>\r\n          <p>{eachComic.id}</p>\r\n          <p>{eachComic.title}</p>\r\n          <img alt={eachComic.title} scr={`${eachComic.thumbnail.path}.${eachComic.thumbnail.extension}`}></img>\r\n          {eachComic.creators.items.length === 0 ? \r\n            <p>n√£o encontrado</p> : \r\n            eachComic.creators.items.map((eachCreator, index) => <p key={index}>{eachCreator.name}</p>\r\n          )}\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './routes/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}