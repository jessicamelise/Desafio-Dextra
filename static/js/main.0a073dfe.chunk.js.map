{"version":3,"sources":["assets/search.svg","components/Input.js","components/Header.js","loadApis/api.js","components/Button.js","components/Comics.js","components/DetailedComics.js","routes/App.js","serviceWorker.js","index.js"],"names":["module","exports","Input","props","Header","className","placeholder","alt","src","search","loadComicsApi","offset","a","fetch","getComicsApi","json","response","console","error","Button","name","Comics","useState","comics","setComics","useEffect","then","list","data","results","map","eachComic","index","key","title","thumbnail","path","extension","id","creators","items","length","creator","DetailedComics","App","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"0GAAAA,EAAOC,QAAU,IAA0B,oC,oKCE9BC,G,KAAQ,SAACC,GAEpB,OACE,0BAAWA,K,iBCAFC,EAAS,WAOpB,OACE,4BAAQC,UAAU,UACd,6BAASA,UAAU,aACf,uBAAGA,UAAU,QAAb,UACA,2BAAOA,UAAU,gBACjB,kBAAC,EAAD,CACIA,UAAU,eACVC,YAAY,4BAGhB,yBAAKD,UAAU,cAAcE,IAAI,SAASC,IAAKC,U,yBCtB9CC,EAAa,uCAAG,WAAOC,GAAP,iBAAAC,EAAA,+EAEEC,MAAM,kJAAD,OAA0J,GAAPF,IAF1J,cAEnBG,EAFmB,gBAGFA,EAAaC,OAHX,cAGnBC,EAHmB,yBAIlBA,GAJkB,kCAOzBC,QAAQC,MAAM,4CAAd,MAPyB,0DAAH,sDCEbC,EAAS,SAAChB,GAErB,OACE,2BAAYA,EAAQA,EAAMiB,OCCjBC,EAAS,WAAO,IAAD,EACEC,mBAAS,IADX,mBACnBC,EADmB,KACXC,EADW,KAa1B,OANAC,qBAAU,WACRf,EAAc,IAAIgB,MAAK,SAACC,GACtBH,EAAUG,EAAKC,KAAKC,cAErB,IAGD,oCACE,kBAAC,EAAD,MACA,6BAASxB,UAAU,eACjB,yBAAKA,UAAU,kBACZkB,EAAOO,KAAI,SAACC,EAAWC,GAAZ,OACV,yBAAK3B,UAAU,aAAa4B,IAAKD,GAC/B,yBACEzB,IAAKwB,EAAUG,MACf1B,IAAG,UAAKuB,EAAUI,UAAUC,KAAzB,YAAiCL,EAAUI,UAAUE,WACxDhC,UAAU,eAGZ,2BAAI0B,EAAUO,IACd,qCAAWP,EAAUG,OACgB,IAApCH,EAAUQ,SAASC,MAAMC,OACxB,0DACA,uCACGV,EAAUQ,SAASC,MAAMV,KAAI,SAACY,EAASV,GAAV,OAAoB,wBAAI3B,UAAU,eAAe4B,IAAKD,GAAQU,EAAQtB,eAM9G,yBAAKf,UAAU,oBACb,kBAAC,EAAD,CACEA,UAAU,gBACVe,KAAK,aAGP,kBAAC,EAAD,CACEf,UAAU,gBACVe,KAAK,aC/CJuB,EAAiB,WAE5B,OACE,oCACE,kBAAC,EAAD,MACA,yBAAKtC,UAAU,eAAf,YCQSuC,MAZf,WAEE,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOR,KAAK,IAAIS,OAAO,EAAMC,UAAWzB,IACxC,kBAAC,IAAD,CAAOe,KAAK,YAAYU,UAAWH,OCCvBI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjC,MAAK,SAAAkC,GACJA,EAAaC,gBAEdC,OAAM,SAAA5C,GACLD,QAAQC,MAAMA,EAAM6C,a","file":"static/js/main.0a073dfe.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/search.e8773304.svg\";","import React from 'react';\r\n\r\nexport const Input = (props) => {\r\n \r\n  return (\r\n    <input {...props}></input>\r\n  );\r\n}","import React from 'react';\r\nimport { Input } from './Input.js';\r\nimport '../App.css';\r\nimport search from '../assets/search.svg'\r\n\r\nexport const Header = () => {\r\n    // const [characters, setCharacters] = useState(\"\");\r\n\r\n    // const handleSearchCharacters = (e) => {\r\n    //     setCharacters(e.target.value);\r\n    //   };\r\n \r\n  return (\r\n    <header className=\"header\">\r\n        <section className=\"max-width\">\r\n            <p className=\"logo\">MARVEL</p>\r\n            <label className=\"label-header\">\r\n            <Input \r\n                className=\"input-header\" \r\n                placeholder=\"Pesquise personagens...\"\r\n                // onBlur={handleSearchCharacters}\r\n            />\r\n            <img className=\"search-icon\" alt=\"search\" src={search}></img>\r\n            </label>\r\n        </section>\r\n    </header>\r\n  );\r\n}","export const loadComicsApi = async (offset) => {\r\n  try {\r\n    const getComicsApi = await fetch(`https://gateway.marvel.com/v1/public/comics?ts=1&apikey=8420b5759538c93703a1aa3af67a2199&hash=db6ec985bba99cf00b9fa4140ed9340e&limit=10&offset=${offset*10}`)\r\n    const response = await getComicsApi.json();\r\n    return response;\r\n  }\r\n  catch (err) {\r\n    console.error(\"We got a problem to fetch the information\", err)\r\n  }\r\n}","import React from 'react';\r\n\r\nexport const Button = (props) => {\r\n \r\n  return (\r\n    <button {...props}>{props.name}</button>\r\n  );\r\n}","import React, { useState, useEffect } from 'react';\r\nimport '../App.css';\r\nimport { Header } from \"../components/Header\";\r\nimport { loadComicsApi } from \"../loadApis/api.js\";\r\nimport { Button } from \"./Button.js\";\r\n\r\nexport const Comics = () => {\r\n  const [comics, setComics] = useState([]);\r\n\r\n  // const handleClick = (path) => {\r\n  //   history.push(path);\r\n  // };\r\n\r\n  useEffect(() => {\r\n    loadComicsApi(16).then((list) => {\r\n      setComics(list.data.results);\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <Header />\r\n      <section className=\"main-comics\">\r\n        <div className=\"max-width-main\">\r\n          {comics.map((eachComic, index) => (\r\n            <div className=\"each-comic\" key={index}>\r\n              <img\r\n                alt={eachComic.title}\r\n                src={`${eachComic.thumbnail.path}.${eachComic.thumbnail.extension}`}\r\n                className=\"thumbnails\"\r\n              >\r\n              </img>\r\n              <p>{eachComic.id}</p>\r\n              <p>Title: {eachComic.title}</p>\r\n              {eachComic.creators.items.length === 0 ?\r\n                <p>Creators: Não Encontrado</p> :\r\n                <p>Creators:\r\n                  {eachComic.creators.items.map((creator, index) => <li className=\"list-creator\" key={index}>{creator.name}</li>)}\r\n                </p>\r\n              }\r\n            </div>\r\n          ))}\r\n        </div>\r\n        <div className=\"max-width-button\">\r\n          <Button\r\n            className=\"button-comics\"\r\n            name=\"Previous\"\r\n            // onClick={() => handleClick(parameter)}\r\n          />\r\n          <Button\r\n            className=\"button-comics\"\r\n            name=\"Next\"\r\n          // onClick={() => handleClick(parameter)}\r\n          />\r\n        </div>\r\n      </section>\r\n    </>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { Header } from \"../components/Header\";\r\nimport '../App.css';\r\n\r\nexport const DetailedComics = () => {\r\n \r\n  return (\r\n    <>\r\n      <Header />\r\n      <div className=\"main-comics\">\r\n        Olá\r\n      </div>\r\n    </>\r\n  );\r\n}","import React from 'react';\r\nimport { Switch, Route, HashRouter } from \"react-router-dom\";\r\nimport { Comics } from \"../components/Comics\";\r\nimport { DetailedComics } from \"../components/DetailedComics\";\r\n\r\nfunction App() {\r\n\r\n  return (\r\n    <HashRouter>\r\n      <Switch>\r\n        <Route path=\"/\" exact={true} component={Comics} />\r\n        <Route path=\"/detailed\" component={DetailedComics} />        \r\n      </Switch>\r\n    </HashRouter>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './routes/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}